name: check for new releases qbittorrent-nox-static

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

jobs:
  skip_duplicate_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-24.04-arm
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    permissions:
      actions: write
      contents: read
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: "always"
          cancel_others: "false"
          skip_after_successful_duplicate: false
          do_not_skip: ""

  check_release:
    needs: skip_duplicate_job
    if: ${{ needs.skip_duplicate_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-24.04-arm
    name: "Check for latest releases or tags"
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      trigger_files_workflow: "no"
      trigger_build_workflow: "no"

    permissions:
      actions: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: bootstrap current_github_tag array values to file
        run: |
          cat > "current_github_tag.sh" <<- CURRENT_GITHUB_TAG
          declare -A current_github_tag
          current_github_tag[qbittorrent]="$(git ls-remote -q -t --refs "https://github.com/qbittorrent/qBittorrent.git" | awk '{sub("refs/tags/release-", "");sub("(.*)(-[^0-9].*|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_github_tag[qt5]="$(git ls-remote -q -t --refs https://github.com/qt/qtbase.git | awk '/v5(.*)-lts-lgpl/{sub("refs/tags/v", ""); print $2 }' | sed 's/-lts-lgpl//g' | awk '!/^$/' | sort -rV | head -n1)"
          current_github_tag[qt6]="$(git ls-remote -q -t --refs "https://github.com/qt/qtbase.git" | awk '/v6/{sub("refs/tags/v", ""); sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_github_tag[libtorrent_1_2]="$(git ls-remote -q -t --refs "https://github.com/arvidn/libtorrent.git" | awk '/\/v1/{sub("refs/tags/v", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_github_tag[libtorrent_2_0]="$(git ls-remote -q -t --refs "https://github.com/arvidn/libtorrent.git" | awk '/\/v2/{sub("refs/tags/v", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_github_tag[boost]="$(git ls-remote -q -t --refs https://github.com/boostorg/boost.git | awk '{sub("refs/tags/boost-", "");sub("(.*)(rc|alpha|beta|-)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          current_github_tag[openssl]="$(git ls-remote -q -t --refs "https://github.com/openssl/openssl.git" | awk '/openssl/{sub("refs/tags/openssl-", "");sub("(.*)(v6|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          CURRENT_GITHUB_TAG

      - name: bootstrap current_workflow_version array values to file
        run: |
          until curl -sLf "https://github.com/userdocs/qbt-workflow-files/releases/latest/download/dependency-version.json" > current_workflow_version.json; do
              echo "waiting for URL."
              sleep 2
          done
          echo 'declare -A current_workflow_version' > current_workflow_version.sh
          jq -r 'to_entries[]|@sh"current_workflow_version[\(.key)]=\(.value)"' current_workflow_version.json >> current_workflow_version.sh

      - name: bootstrap current_build_version array values to file
        run: |
          until curl -sLf "https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/dependency-version.json" > current_build_version.json; do
              echo "waiting for URL."
              sleep 2
          done
          echo 'declare -A current_build_version' > current_build_version.sh
          jq -r 'to_entries[]|@sh"current_build_version[\(.key)]=\(.value)"' < <(jq 'del(.revision)' current_build_version.json) >> current_build_version.sh

      - name: Test values - latest release vs workflow files
        run: |
          source current_github_tag.sh
          source current_workflow_version.sh

          ver() {
            local test_array
            read -ra test_array < <(printf "%s" "${@//./ }")
            printf "%d%03d%03d%03d" "${test_array[@]}"
          }

          for iray in "${!current_github_tag[@]}"; do
            if [[ "$(ver "${current_github_tag[$iray]}")" -gt "$(ver "${current_workflow_version[$iray]}")" ]]; then
              printf "%-14s latest:%-10s qbt-workflow-files:%-10s %s\n" "$iray" "${current_github_tag[$iray]}" "${current_workflow_version[$iray]}" "< New version available - workflow will be triggered"
              echo "trigger_files_workflow=yes" >> $GITHUB_ENV
            else
              printf "%-14s latest:%-10s qbt-workflow-files:%-10s\n" "$iray" "${current_github_tag[$iray]}" "${current_workflow_version[$iray]}"
            fi
          done

      - name: trigger workflow - qbt download and release reusable files for workflows
        if: env.trigger_files_workflow == 'yes'
        run: gh workflow run files_download_and_release.yml

      - name: Await local workflow - qbt download and release reusable files for workflows
        if: env.trigger_files_workflow == 'yes'
        uses: codex-/await-local-workflow-run@v1
        with:
          token: ${{ secrets.MYTOKEN }}
          workflow: "files_download_and_release.yml"
          timeout_mins: 20
          poll_interval_ms: 10000

      - name: Pushover notification workflows
        if: success () && env.trigger_files_workflow == 'yes'
        run: curl -4s -d message="New dependency versions have been released" -d title="qbt workflow files updated" -d token="${{ secrets.PUSHOVER_API_TOKEN }}" -d user="${{ secrets.PUSHOVER_USER_KEY }}" 'https://api.pushover.net/1/messages.json'

      - name: re-bootstrap updated current_workflow_version array values to file
        if: env.trigger_files_workflow == 'yes'
        run: |
          until curl -sLf "https://github.com/userdocs/qbt-workflow-files/releases/latest/download/dependency-version.json" > current_workflow_version.json; do
              echo "waiting for URL."
              sleep 2
          done
          echo 'declare -A current_workflow_version' > current_workflow_version.sh
          jq -r 'to_entries[]|@sh"current_workflow_version[\(.key)]=\(.value)"' current_workflow_version.json >> current_workflow_version.sh

      - name: Test values - workflow files vs current build
        run: |
          source current_workflow_version.sh
          source current_build_version.sh

          ver() {
            local test_array
            read -ra test_array < <(printf "%s" "${@//./ }")
            printf "%d%03d%03d%03d" "${test_array[@]}"
          }

          for iray in "${!current_build_version[@]}"; do
            if [[ "$(ver "${current_workflow_version[$iray]}")" -gt "$(ver "${current_build_version[$iray]}")" ]]; then
              printf "%-14s qbt-workflow-files:%-10s qbt-static-current:%-10s %s\n" "$iray" "${current_workflow_version[$iray]}" "${current_build_version[$iray]}" "< New version available - workflow will be triggered"
              echo "trigger_build_workflow=yes" >> $GITHUB_ENV
            else
              printf "%-14s qbt-workflow-files:%-10s qbt-static-current:%-10s\n" "$iray" "${current_workflow_version[$iray]}" "${current_build_version[$iray]}"
            fi
          done

      - name: Dispatch an action and get the run ID
        if: env.trigger_build_workflow == 'yes'
        uses: codex-/return-dispatch@v2
        id: return_dispatch
        with:
          token: ${{ secrets.MYTOKEN }}
          ref: master
          repo: qbittorrent-nox-static
          owner: userdocs
          workflow_inputs: '{ "skip_rerun": "false", "retries": "3" }'
          workflow: ci-main-reusable-caller.yml
          workflow_timeout_seconds: 300

      - name: Await Run ID ${{ steps.return_dispatch.outputs.run_id }}
        if: env.trigger_build_workflow == 'yes'
        uses: Codex-/await-remote-run@v1
        id: await_remote_build_run
        with:
          token: ${{ secrets.MYTOKEN }}
          repo: qbittorrent-nox-static
          owner: userdocs
          run_id: ${{ steps.return_dispatch.outputs.run_id }}
          run_timeout_seconds: 7200
          poll_interval_ms: 10000

      - name: Pushover notification qbt static build
        if: steps.await_remote_build_run.outcome == 'success' && env.trigger_build_workflow == 'yes'
        run: curl -4s -d message="New dependency versions have been built" -d title="qbt static has been rebuilt" -d token="${{ secrets.PUSHOVER_API_TOKEN }}" -d user="${{ secrets.PUSHOVER_USER_KEY }}" 'https://api.pushover.net/1/messages.json'
