name: ci - workflows-files-release

on:
  workflow_call:
    secrets:
      PUSHOVER_API_TOKEN:
        required: true
      PUSHOVER_USER_KEY:
        required: true

jobs:
  workflows-files-release:
    runs-on: ubuntu-24.04-arm
    defaults:
      run:
        shell: bash
    env:
      XZ_OPT: "-9T0"
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ github.event.client_payload.sha }}

      - run: echo using SHA ${SHA}
        env:
          SHA: ${{ github.event.client_payload.sha }}

      - name: bootstrap latest release dependency-version.json
        run: curl -sL "https://github.com/userdocs/qbt-workflow-files/releases/latest/download/dependency-version.json" -o dv.json

      - name: bootstrap
        run: |
          printf "%s\n" "|  Dependency   | Version | Source URL | " > body.md
          printf "%s\n" "| :-----------: | :-----: | :--------: |" >> body.md

      - name: glibc 2.40
        run: |
          glibc_2_40_url="https://ftp.gnu.org/gnu/libc/glibc-2.40.tar.xz"
          echo "glibc_2_40=2.40" >> $GITHUB_ENV

          printf "%s\n" "| glibc | 2.40 | ${glibc_2_40_url} |" >> body.md
          printf "240" > tag_name.txt

          curl -sL "${glibc_2_40_url}" > glibc.2.40.tar.xz

      - name: zlib-ng
        run: |
          zlib_url="https://github.com/zlib-ng/zlib-ng.git"
          zlib_version="$(curl -sL https://raw.githubusercontent.com/zlib-ng/zlib-ng/develop/zlib.h.in | sed -rn 's|#define ZLIB_VERSION "(.*)"|\1|p')" zlib_version=${zlib_version/.zlib-ng}
          echo "zlib=${zlib_version}" >> $GITHUB_ENV

          printf "%s\n" "| zlib | ${zlib_version} | ${zlib_url} |" >> body.md
          printf "${zlib_version//\./}" >> tag_name.txt

          git clone --single-branch --branch "develop" --shallow-submodules --recurse-submodules --depth 1 "${zlib_url}" zlib
          tar cJf zlib.tar.xz zlib

      - name: iconv
        run: |
          iconv_url="https://ftp.gnu.org/gnu/libiconv/$(grep -Eo 'libiconv-([0-9]{1,3}[.]?)([0-9]{1,3}[.]?)([0-9]{1,3}?)\.tar.gz' <(curl -sL https://ftp.gnu.org/gnu/libiconv/) | sort -V | tail -1)"
          iconv_version="$(grep -Eo 'libiconv-([0-9]{1,3}[.]?)([0-9]{1,3}[.]?)([0-9]{1,3}?)\.tar.gz' <(curl -sL https://ftp.gnu.org/gnu/libiconv/) | sort -V | tail -1)" && iconv_version=${iconv_version/libiconv-} && iconv_version=${iconv_version/.tar.gz}
          echo "iconv=${iconv_version}" >> $GITHUB_ENV

          printf "%s\n" "| iconv | ${iconv_version} | ${iconv_url} |" >> body.md
          printf "${iconv_version//\./}" >> tag_name.txt

          curl -sL "$iconv_url" > iconv.tar.gz
          gunzip -c < iconv.tar.gz | xz -c > iconv.tar.xz

      - name: icu
        run: |
          icu_github_tag="$(git ls-remote -q -t --refs https://github.com/unicode-org/icu.git | awk '/\/release-/{sub("refs/tags/release-", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          icu_url="https://github.com/unicode-org/icu/releases/download/release-${icu_github_tag}/icu4c-${icu_github_tag/-/_}-src.tgz"
          icu_version="${icu_github_tag}"
          echo "icu=${icu_github_tag}" >> $GITHUB_ENV

          printf "%s\n" "| icu | ${icu_github_tag} | ${icu_url} |" >> body.md
          printf "${icu_version/-/}" >> tag_name.txt

          curl -sL "$icu_url" > icu.tgz
          gunzip -c < icu.tgz | xz -c > icu.tar.xz

      - name: openssl
        run: |
          openssl_url="https://github.com/openssl/openssl.git"
          openssl_github_tag="$(git ls-remote -q -t --refs "${openssl_url}" | awk '/openssl/{sub("refs/tags/", "");sub("(.*)(v6|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          openssl_version="${openssl_github_tag#openssl-}"
          echo "openssl=${openssl_version}" >> $GITHUB_ENV

          printf "%s\n" "| openssl | ${openssl_version} | ${openssl_url} |" >> body.md
          printf "${openssl_version//\./}" >> tag_name.txt

          if [[ $(curl -o /dev/null -sLIw '%{http_code}' ""https://github.com/openssl/openssl/releases/download/${openssl_github_tag}/${openssl_github_tag}.tar.gz"") -eq '200' ]]; then
              openssl_dl_url="https://github.com/openssl/openssl/releases/download/${openssl_github_tag}/${openssl_github_tag}.tar.gz"
          else
              openssl_dl_url="https://github.com/openssl/openssl/archive/refs/tags/${openssl_github_tag}.tar.gz"
          fi

          curl -sL "${openssl_dl_url}" > openssl.tar.gz
          gunzip -c < openssl.tar.gz | xz -c > openssl.tar.xz
      - name: boost
        run: |
          boost_version="$(git ls-remote -q -t --refs https://github.com/boostorg/boost.git | awk '{sub("refs/tags/boost-", "");sub("(.*)(rc|alpha|beta|-bgl)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"

          if curl -sfLI "https://github.com/boostorg/boost/releases/latest/download/boost-${boost_version}-b2-nodocs.tar.xz"; then
            boost_url="https://github.com/boostorg/boost/releases/latest/download/boost-${boost_version}-b2-nodocs.tar.xz" && boost_repack="false"
          elif curl -sfLI "https://archives.boost.io/release/${boost_version}/source/boost_${boost_version//./_}.tar.gz" &> /dev/null; then
            boost_url="https://archives.boost.io/release/${boost_version}/source/boost_${boost_version//./_}.tar.gz"
          elif curl -sfLI "https://sourceforge.net/projects/boost/files/boost/${boost_version}/boost_${boost_version//./_}.tar.gz" &> /dev/null; then
            boost_url="https://sourceforge.net/projects/boost/files/boost/${boost_version}/boost_${boost_version//./_}.tar.gz"
          elif curl -sfLI "https://github.com/userdocs/boost/releases/download/boost-${boost_version}/boost_${boost_version//./_}.tar.gz" &> /dev/null; then
            boost_url="https://github.com/userdocs/boost/releases/download/boost-${boost_version}/boost_${boost_version//./_}.tar.gz"
          else
            printf '%s\n' "Error: Unable to find a download link for Boost version: $boost_version"
            exit 1
          fi

          echo "boost=${boost_version}" >> $GITHUB_ENV

          printf "%s\n" "| boost | ${boost_version} | ${boost_url} |" >> body.md
          printf "${boost_version//\./}" >> tag_name.txt

          if [[ -z "$boost_repack" ]]; then
              curl -sL "$boost_url" > boost.tar.gz
              gunzip -c < boost.tar.gz | xz -c > boost.tar.xz
          else
              curl -sL "$boost_url" > boost.tar.xz
          fi

      - name: libtorrent 1.2
        run: |
          libtorrent_1_2_url="https://github.com/arvidn/libtorrent.git"
          libtorrent_1_2_github_tag="$(git ls-remote -q -t --refs "${libtorrent_1_2_url}" | awk '/\/v1/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          libtorrent_1_2_version="${libtorrent_1_2_github_tag/v}"
          echo "libtorrent_1_2=${libtorrent_1_2_version}" >> $GITHUB_ENV

          printf "%s\n" "| libtorrent_1_2 | ${libtorrent_1_2_version} | ${libtorrent_1_2_url} |" >> body.md
          printf "${libtorrent_1_2_version//\./}" >> tag_name.txt

          git clone --single-branch --branch "${libtorrent_1_2_github_tag}" --shallow-submodules --recurse-submodules --depth 1 "${libtorrent_1_2_url}" libtorrent_${libtorrent_1_2_version}
          tar cJf libtorrent.${libtorrent_1_2_version}.tar.xz libtorrent_${libtorrent_1_2_version}

      - name: libtorrent 2.0
        run: |
          libtorrent_2_0_url="https://github.com/arvidn/libtorrent.git"
          libtorrent_2_0_github_tag="$(git ls-remote -q -t --refs "${libtorrent_2_0_url}" | awk '/\/v2/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          libtorrent_2_0_version="${libtorrent_2_0_github_tag/v}"
          echo "libtorrent_2_0=${libtorrent_2_0_version}" >> $GITHUB_ENV

          printf "%s\n" "| libtorrent_2_0 | ${libtorrent_2_0_version} | ${libtorrent_2_0_url} |" >> body.md
          printf "${libtorrent_2_0_version//\./}" >> tag_name.txt

          git clone --single-branch --branch "${libtorrent_2_0_github_tag}" --shallow-submodules --recurse-submodules --depth 1 "${libtorrent_2_0_url}" libtorrent_${libtorrent_2_0_version}
          tar cJf libtorrent.${libtorrent_2_0_version}.tar.xz libtorrent_${libtorrent_2_0_version}

      - name: double_conversion
        run: |
          double_conversion_url="https://github.com/google/double-conversion.git"
          double_conversion_github_tag="$(git ls-remote -q -t --refs "${double_conversion_url}" | awk '/v/{sub("refs/tags/", "");sub("(.*)(v6|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          double_conversion_version="${double_conversion_github_tag/v}"
          echo "double_conversion=${double_conversion_version}" >> $GITHUB_ENV

          printf "%s\n" "| double_conversion | ${double_conversion_version} | ${double_conversion_url} |" >> body.md
          printf "${double_conversion_version//\./}" >> tag_name.txt

          curl -sL "https://github.com/google/double-conversion/archive/refs/tags/${double_conversion_github_tag}.tar.gz" > double_conversion.tar.gz
          gunzip -c < double_conversion.tar.gz | xz -c > double_conversion.tar.xz

      - name: qt5
        run: |
          qt5_github_tag="$(git ls-remote -q -t --refs https://github.com/qt/qtbase.git | awk '/v5(.*)-lts-lgpl/{sub("refs/tags/", ""); print $2 }' | sed 's/-lts-lgpl//g' | awk '!/^$/' | sort -rV | head -n1)"
          qt5_short="$(grep -Eom1 "v5.([0-9]{1,2})" <<< "${qt5_github_tag}")"
          qt5_version="${qt5_github_tag/v}"
          echo "qt5=${qt5_version}" >> $GITHUB_ENV

          qt5base_url="https://master.qt.io/archive/qt/${qt5_short/v/}/${qt5_version}/submodules/qtbase-everywhere-opensource-src-${qt5_version}.tar.xz"
          qt5tools_url="https://master.qt.io/archive/qt/${qt5_short/v/}/${qt5_version}/submodules/qttools-everywhere-opensource-src-${qt5_version}.tar.xz"

          if [[ $(curl -o /dev/null -sLIw '%{http_code}' "${qt5base_url}") -eq '200' ]]; then
              curl -sL "${qt5base_url}" > qt5base.tar.xz
          else
              qt5base_url="https://github.com/qt/qtbase.git"
              git clone --no-tags --single-branch --branch "${qt5_github_tag}-lts-lgpl" --shallow-submodules --recurse-submodules -j"$(nproc)" --depth 1 "${qt5base_url}" "qt5base"
              tar cJf qt5base.tar.xz qt5base
          fi

          if [[ $(curl -o /dev/null -sLIw '%{http_code}' "${qt5tools_url}") -eq '200' ]]; then
              curl -sL "${qt5tools_url}" > qt5tools.tar.xz
          else
              qt5tools_url="https://github.com/qt/qttools.git"
              git clone --no-tags --single-branch --branch "${qt5_github_tag}-lts-lgpl" --shallow-submodules --recurse-submodules -j"$(nproc)" --depth 1 "${qt5tools_url}" "qt5tools"
              tar cJf qt5tools.tar.xz qt5tools
          fi

          printf "%s\n" "| qt5base | ${qt5_version} | ${qt5base_url} |" >> body.md
          printf "%s\n" "| qt5tools | ${qt5_version} | ${qt5tools_url} |" >> body.md
          printf "${qt5_version//\./}" >> tag_name.txt

      - name: qt6
        run: |
          qt6_github_tag="$(git ls-remote -q -t --refs "https://github.com/qt/qtbase.git" | awk '/v6/{sub("refs/tags/", ""); sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          qt6_short="$(grep -Eom1 "v6.([0-9]{1,2})" <<< "${qt6_github_tag}")"
          qt6_version="${qt6_github_tag/v}"
          echo "qt6=${qt6_version}" >> $GITHUB_ENV

          qt6base_url="https://master.qt.io/archive/qt/${qt6_short/v/}/${qt6_version}/submodules/qtbase-everywhere-src-${qt6_version}.tar.xz"
          qt6tools_url="https://master.qt.io/archive/qt/${qt6_short/v/}/${qt6_version}/submodules/qttools-everywhere-src-${qt6_version}.tar.xz"

          if [[ $(curl -o /dev/null -sLIw '%{http_code}' "${qt6base_url}") -eq '200' ]]; then
              curl -sL "${qt6base_url}" > qt6base.tar.xz
          else
              qt6base_url="https://github.com/qt/qtbase.git"
              git clone --no-tags --single-branch --branch "${qt6_github_tag}" --shallow-submodules --recurse-submodules -j"$(nproc)" --depth 1 "${qt6base_url}" "qt6base"
              tar cJf qt6base.tar.xz qt6base
          fi

          if [[ $(curl -o /dev/null -sLIw '%{http_code}' "${qt6tools_url}") -eq '200' ]]; then
              curl -sL "${qt6tools_url}" > qt6tools.tar.xz
          else
              qt6tools_url="https://github.com/qt/qttools.git"
              git clone --no-tags --single-branch --branch "${qt6_github_tag}" --shallow-submodules --recurse-submodules -j"$(nproc)" --depth 1 "${qt6tools_url}" "qt6tools"
              tar cJf qt6tools.tar.xz qt6tools
          fi

          printf "%s\n" "| qt6base | ${qt6_version} | ${qt6base_url} |" >> body.md
          printf "%s\n" "| qt6tools | ${qt6_version} | ${qt6tools_url} |" >> body.md
          printf "${qt6_version//\./}" >> tag_name.txt

      - name: qbittorrent
        run: |
          qbittorrent_url="https://github.com/qbittorrent/qBittorrent.git"
          qbittorrent_github_tag="$(git ls-remote -q -t --refs "${qbittorrent_url}" | awk '{sub("refs/tags/", "");sub("(.*)(-[^0-9].*|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          qbittorrent_version="${qbittorrent_github_tag/release-}"
          echo "qbittorrent=${qbittorrent_version}" >> $GITHUB_ENV

          printf "%s\n\n" "| qbittorrent | ${qbittorrent_version} | ${qbittorrent_url} |" >> body.md
          printf "${qbittorrent_version//\./}" >> tag_name.txt

          git clone --single-branch --branch "${qbittorrent_github_tag}" --shallow-submodules --recurse-submodules --depth 1 "${qbittorrent_url}" qbittorrent
          tar cJf qbittorrent.tar.xz qbittorrent

      - name: Create current_workflow_version array
        run: |
          cat >> "body.md" <<- CURRENT_WORKFLOW_VERSION
          <!--
          declare -A current_workflow_version
          current_workflow_version[glibc]="${{ env.glibc_2_40 }}"
          current_workflow_version[zlib]="${{ env.zlib }}"
          current_workflow_version[iconv]="${{ env.iconv }}"
          current_workflow_version[icu]="${{ env.icu }}"
          current_workflow_version[openssl]="${{ env.openssl }}"
          current_workflow_version[boost]="${{ env.boost }}"
          current_workflow_version[libtorrent_1_2]="${{ env.libtorrent_1_2 }}"
          current_workflow_version[libtorrent_2_0]="${{ env.libtorrent_2_0 }}"
          current_workflow_version[double_conversion]="${{ env.double_conversion }}"
          current_workflow_version[qt5]="${{ env.qt5 }}"
          current_workflow_version[qt6]="${{ env.qt6 }}"
          current_workflow_version[qbittorrent]="${{ env.qbittorrent }}"
          -->
          CURRENT_WORKFLOW_VERSION

          cat >> "dependency-version.json" <<- CURRENT_WORKFLOW_VERSION_JSON
          {
            "glibc": "${{ env.glibc_2_40 }}",
            "zlib": "${{ env.zlib }}",
            "iconv": "${{ env.iconv }}",
            "icu": "${{ env.icu }}",
            "openssl": "${{ env.openssl }}",
            "boost": "${{ env.boost }}",
            "libtorrent_1_2": "${{ env.libtorrent_1_2 }}",
            "libtorrent_2_0": "${{ env.libtorrent_2_0 }}",
            "double_conversion": "${{ env.double_conversion }}",
            "qt5": "${{ env.qt5 }}",
            "qt6": "${{ env.qt6 }}",
            "qbittorrent": "${{ env.qbittorrent }}"
          }
          CURRENT_WORKFLOW_VERSION_JSON

          cat >> "pushover_body.text" <<- PUSHOVER_BODY_TEXT

          Here are the latest dependency versions that have been released:

          glibc: ${{ env.glibc_2_40 }}
          zlib: ${{ env.zlib }}
          iconv: ${{ env.iconv }}
          icu: ${{ env.icu }}
          openssl: ${{ env.openssl }}
          boost: ${{ env.boost }}
          libtorrent_1_2: ${{ env.libtorrent_1_2 }}
          libtorrent_2_0: ${{ env.libtorrent_2_0 }}
          double_conversion: ${{ env.double_conversion }}
          qt5: ${{ env.qt5 }}
          qt6: ${{ env.qt6 }}
          qbittorrent: ${{ env.qbittorrent }}
          PUSHOVER_BODY_TEXT

      - name: Generate release asset attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "*.tar.xz"

      - name: Pandoc - format body
        run: |
          pandoc_git_tag="$(git ls-remote -q -t --refs https://github.com/jgm/pandoc.git | awk '/tags\/[0-9]/{sub("refs/tags/", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          curl -sLo- "https://github.com/jgm/pandoc/releases/latest/download/pandoc-${pandoc_git_tag}-linux-$(dpkg --print-architecture).tar.gz" | tar xzf - --strip-components 2 -C "$(pwd)" --exclude="share"
          ./pandoc --wrap=preserve -f gfm body.md -t gfm -o release.md

      - name: Set tag via tag_name.txt
        run: echo "github_release_tag=$(cat tag_name.txt)" >> $GITHUB_ENV

      - name: Host - "Create release - tag - assets"
        id: workflow_files_release
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          makeLatest: true
          artifacts: "*.tar.xz,dependency-version.json"
          replacesArtifacts: true
          tag: "${{ env.github_release_tag }}"
          name: "Files to be reused in qbt static matrix builds"
          bodyFile: release.md
          allowUpdates: true
          token: "${{ github.token }}"

      - name: Pushover notification workflows
        if: steps.workflow_files_release.outcome == 'success'
        run: |
          message="$(printf '%b\n' "New dependency versions have been released\n\n")"
          curl -4s -d message="$(cat pushover_body.text)" -d title="qbt workflow files updated" -d token="${{ secrets.PUSHOVER_API_TOKEN }}" -d user="${{ secrets.PUSHOVER_USER_KEY }}" 'https://api.pushover.net/1/messages.json'
